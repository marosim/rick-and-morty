{"version":3,"sources":["rick-and-morty.png","api/useFetch.js","api/dataRoutes.js","components/CharacterCard.js","components/Pagination.js","components/CharacterList.js","api/useData.js","components/LocationCard.js","components/LocationList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useFetch","initUrl","useState","url","setUrl","undefined","data","setData","useEffect","fetch","then","response","status","json","mainUrls","CharacterCard","props","className","src","image","alt","name","onClick","event","target","parentElement","querySelector","classList","toggle","species","gender","type","location","origin","episodes","Pagination","pageList","start","currentPage","end","pages","prev","next","index","cssClass","push","key","setCurrentPage","unshift","CharacterList","characters","pageNum","useCharacters","cardList","results","map","character","id","episode","length","info","LocationCard","showDetails","e","dimension","residents","LocationList","setCardList","setPages","locations","useLocations","App","showCharacterList","setShowCharacterList","showLocationList","setShowLocationList","logo","width","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea514dbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rick-and-morty.d88b4ae4.png\";","import { useState, useEffect } from \"react\";\r\n\r\n/**\r\n     Fetch data from the given url. If it can't get any data from the url, than it writes a message into the console.\r\n     *\r\n     * @param initUrl string that gives the route that the function fetch data from.\r\n     */\r\nexport const useFetch = (initUrl) => {\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (response.status !== 200) return \"There must be a problem\";\r\n        return response.json();\r\n      })\r\n      .then((json) => setData(json));\r\n  }, [url]);\r\n\r\n  return [data, setUrl];\r\n};\r\n","export const mainUrls = {\r\n  characters: \"https://rickandmortyapi.com/api/character/?page=\",\r\n  locations: \"https://rickandmortyapi.com/api/location/?page=\",\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function CharacterCard(props) {\r\n  function showDetails(event) {\r\n    event.target.parentElement.querySelector(\"div\").classList.toggle(\"details\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"charContainer\">\r\n      <img\r\n        className=\"characterImg\"\r\n        src={props.image}\r\n        alt={props.name}\r\n        onClick={showDetails}\r\n      />\r\n      <h3>{props.name}</h3>\r\n      <h4>{props.species}</h4>\r\n      <div className=\"details\">\r\n        <h5>{props.gender}</h5>\r\n        <h5>Status: {props.status}</h5>\r\n        <h5>{props.type}</h5>\r\n        <h5>Location: {props.location}</h5>\r\n        <h5>Origin: {props.origin}</h5>\r\n        <h5>Number of episodes: {props.episodes}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Pagination(props) {\r\n  const pageList = [];\r\n\r\n  let start = props.currentPage - 4;\r\n  if (start < 1) {\r\n    start = 1;\r\n  }\r\n\r\n  let end = start + 8;\r\n  if (end > props.pages) {\r\n    end = props.pages;\r\n    start = props.pages - 8;\r\n    if (start < 1) {\r\n      start = 1;\r\n    }\r\n  }\r\n\r\n  let prev = props.currentPage - 1;\r\n  if (prev < 1) {\r\n    prev = 1;\r\n  }\r\n\r\n  let next = props.currentPage + 1;\r\n  if (next > props.pages) {\r\n    next = props.pages;\r\n  }\r\n\r\n  for (let index = start; index <= end; index++) {\r\n    let cssClass = \"\";\r\n    if (index === props.currentPage) {\r\n      cssClass = \"currentPage\";\r\n    }\r\n\r\n    pageList.push(\r\n      <li\r\n        key={index}\r\n        className={cssClass}\r\n        onClick={() => {\r\n          props.setCurrentPage(index);\r\n        }}\r\n      >\r\n        {index}\r\n      </li>\r\n    );\r\n  }\r\n\r\n  pageList.unshift(\r\n    <li\r\n      key=\"prev\"\r\n      onClick={() => {\r\n        props.setCurrentPage(prev);\r\n      }}\r\n    >\r\n      Prev\r\n    </li>\r\n  );\r\n\r\n  pageList.push(\r\n    <li\r\n      key=\"next\"\r\n      onClick={() => {\r\n        props.setCurrentPage(next);\r\n      }}\r\n    >\r\n      Next\r\n    </li>\r\n  );\r\n\r\n  return <div>{pageList}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useCharacters } from \"../api/useData\";\r\nimport CharacterCard from \"./CharacterCard\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nexport default function CharacterList() {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const characters = useCharacters(currentPage);\r\n\r\n  let pages = 1;\r\n  let cardList = \"\";\r\n\r\n  if (characters !== \"Loading...\") {\r\n    cardList = characters.results.map((character) => (\r\n      <CharacterCard\r\n        key={character.id}\r\n        image={character.image}\r\n        name={character.name}\r\n        species={character.species}\r\n        gender={character.gender}\r\n        status={character.status}\r\n        type={character.type}\r\n        location={character.location.name}\r\n        origin={character.origin.name}\r\n        episodes={character.episode.length}\r\n      />\r\n    ));\r\n    pages = characters.info.pages;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Pagination\r\n        pages={pages}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n      {cardList}\r\n      <Pagination\r\n        pages={pages}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useFetch } from \"./useFetch.js\";\r\nimport { mainUrls } from \"./dataRoutes.js\";\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the characters objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useCharacters = (pageNum = 1) => {\r\n  const [characters, setUrl] = useFetch(mainUrls.characters + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.characters + pageNum);\r\n    // eslint-disable-next-line\r\n  }, [pageNum]);\r\n  return characters === undefined ? \"Loading...\" : characters;\r\n};\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the locations objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useLocations = (pageNum = 1) => {\r\n  const [locations, setUrl] = useFetch(mainUrls.locations + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.locations + pageNum);\r\n    // eslint-disable-next-line\r\n  }, [pageNum]);\r\n  return locations === undefined ? \"Loading...\" : locations;\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function LocationCard(props) {\r\n  function showDetails(e) {\r\n    // e.target.parentElement.querySelector(\".details\").classList.toggle(\"showDetails\");\r\n    e.target.parentElement.querySelector(\"div\").classList.toggle(\"details\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"locContainer\">\r\n      <h3 className=\"locationName\" onClick={showDetails}>\r\n        {props.name}\r\n      </h3>\r\n      <h4 className=\"locationName\" onClick={showDetails}>\r\n        {props.type}\r\n      </h4>\r\n      <div className=\"details\">\r\n        <h5>Dimension: {props.dimension}</h5>\r\n        <h5>Number of residents: {props.residents}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useLocations } from \"../api/useData\";\r\nimport LocationCard from \"./LocationCard\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nexport default function LocationList() {\r\n  const [cardList, setCardList] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pages, setPages] = useState(1);\r\n  const locations = useLocations(currentPage);\r\n\r\n  useEffect(() => {\r\n    if (locations !== \"Loading...\") {\r\n      setCardList(\r\n        locations.results.map((location) => {\r\n          return (\r\n            <LocationCard\r\n              key={location.id}\r\n              name={location.name}\r\n              type={location.type}\r\n              dimension={location.dimension}\r\n              residents={location.residents.length}\r\n            />\r\n          );\r\n        })\r\n      );\r\n      setPages(locations.info.pages);\r\n    }\r\n  }, [locations]);\r\n\r\n  return (\r\n    <div>\r\n      <Pagination\r\n        pages={pages}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n      {cardList}\r\n      <Pagination\r\n        pages={pages}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport logo from \"./rick-and-morty.png\";\r\nimport CharacterList from \"./components/CharacterList\";\r\nimport LocationList from \"./components/LocationList\";\r\n\r\nfunction App() {\r\n  const [showCharacterList, setShowCharacterList] = useState(false);\r\n  const [showLocationList, setShowLocationList] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={logo} alt=\"logo\" width=\"400\" />\r\n      <br></br>\r\n      <button\r\n        className=\"charactersButton\"\r\n        onClick={() => {\r\n          setShowCharacterList(true);\r\n          setShowLocationList(false);\r\n        }}\r\n      >\r\n        Characters\r\n      </button>\r\n      <button\r\n        className=\"locationsButton\"\r\n        onClick={() => {\r\n          setShowLocationList(true);\r\n          setShowCharacterList(false);\r\n        }}\r\n      >\r\n        Locations\r\n      </button>\r\n      {showLocationList || showCharacterList ? (\r\n        \"\"\r\n      ) : (\r\n        <h3>\r\n          {\" \"}\r\n          Click the buttons to see the list of characters and locations.{\" \"}\r\n          <br></br> For more information on each character and location, click\r\n          on the character image or the location's name.\r\n        </h3>\r\n      )}\r\n\r\n      {showCharacterList ? <CharacterList /> : \"\"}\r\n      {showLocationList ? <LocationList /> : \"\"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}